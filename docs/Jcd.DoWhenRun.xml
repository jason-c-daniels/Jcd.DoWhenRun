<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jcd.DoWhenRun</name>
    </assembly>
    <members>
        <member name="T:Jcd.DoWhenRun.DoWhenRunExtensions">
            <summary>
            A netstandard 1.0 set of extension methods, Do, DoWhen and Run, that give a `Fluent`
            builder-pattern-like experience to operating on `IEnumerable` and `IEnumerable&lt;T&gt;` 
            derived types.
            </summary>
        </member>
        <member name="M:Jcd.DoWhenRun.DoWhenRunExtensions.DoWhen(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean},System.Action{System.Int32,System.Object})">
            <summary>
            Setup an action to conditionally run across the elements of a collection/enumerable.
            </summary>
            <param name="enumerable">The collection to scan</param>
            <param name="action">The action to perform on each element and index of the element.</param>
            <param name="predicate">The condition to check. If true, performs the action.</param>
            <returns>The elements from the input sequence</returns>
            <remarks>This is a LINQ compatible visitor pattern</remarks>
        </member>
        <member name="M:Jcd.DoWhenRun.DoWhenRunExtensions.DoWhen(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean},System.Action{System.Object})">
            <summary>
            Setup an action to conditionally run across the elements of a collection/enumerable.
            </summary>
            <param name="enumerable">The collection to scan</param>
            <param name="action">The action to perform on each element and index of the element.</param>
            <param name="predicate">The condition to check. If true, performs the action.</param>
            <returns>The elements from the input sequence</returns>
            <remarks>This is a LINQ compatible visitor pattern</remarks>
        </member>
        <member name="M:Jcd.DoWhenRun.DoWhenRunExtensions.DoWhen(System.Collections.IEnumerable,System.Func{System.Int32,System.Object,System.Boolean},System.Action{System.Int32,System.Object})">
            <summary>
            Setup an action to conditionally run across the elements of a collection/enumerable.
            </summary>
            <param name="enumerable">The collection to scan</param>
            <param name="action">The action to perform on each element and index of the element.</param>
            <param name="predicate">The condition to check. If true, performs the action.</param>
            <returns>The elements from the input sequence</returns>
            <remarks>This is a LINQ compatible visitor pattern</remarks>
        </member>
        <member name="M:Jcd.DoWhenRun.DoWhenRunExtensions.DoWhen``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Action{System.Int32,``0})">
            <summary>
            Setup an action to conditionally run across the elements of a collection/enumerable.
            </summary>
            <param name="enumerable">The collection to scan</param>
            <param name="action">The action to perform on each element and index of the element.</param>
            <param name="predicate">The condition to check. If true, performs the action.</param>
            <typeparam name="T">The type of each element</typeparam>
            <returns>The elements from the input sequence</returns>
            <remarks>This is a LINQ compatible visitor pattern</remarks>
        </member>
        <member name="M:Jcd.DoWhenRun.DoWhenRunExtensions.DoWhen``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
            Setup an action to conditionally run across the elements of a collection/enumerable.
            </summary>
            <param name="enumerable">The collection to scan</param>
            <param name="action">The action to perform on each element and index of the element.</param>
            <param name="predicate">The condition to check. If true, performs the action.</param>
            <typeparam name="T">The type of each element</typeparam>
            <returns>The elements from the input sequence</returns>
            <remarks>This is a LINQ compatible visitor pattern</remarks>
        </member>
        <member name="M:Jcd.DoWhenRun.DoWhenRunExtensions.DoWhen``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean},System.Action{System.Int32,``0})">
            <summary>
            Setup an action to conditionally run across the elements of a collection/enumerable.
            </summary>
            <param name="enumerable">The collection to scan</param>
            <param name="action">The action to perform on each element and index of the element.</param>
            <param name="predicate">The condition to check. If true, performs the action.</param>
            <typeparam name="T">The type of each element</typeparam>
            <returns>The elements from the input sequence</returns>
            <remarks>This is a LINQ compatible visitor pattern</remarks>
        </member>
        <member name="M:Jcd.DoWhenRun.DoWhenRunExtensions.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            Setup an action to run across the elements of a collection/enumerable.
            </summary>
            <param name="enumerable">The collection to scan</param>
            <param name="action">The action to perform on each element and index of the element.</param>
            <typeparam name="T">The type of each element</typeparam>
            <returns>The elements from the input sequence</returns>
            <remarks>This is a LINQ compatible visitor pattern</remarks>
        </member>
        <member name="M:Jcd.DoWhenRun.DoWhenRunExtensions.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Setup an action to run across the elements of a collection/enumerable.
            </summary>
            <param name="enumerable">The collection to scan</param>
            <param name="action">The action to perform on each element.</param>
            <typeparam name="T">The type of each element</typeparam>
            <returns>The elements from the input sequence</returns>
            <remarks>This is a LINQ compatible visitor pattern</remarks>
        </member>
        <member name="M:Jcd.DoWhenRun.DoWhenRunExtensions.Do(System.Collections.IEnumerable,System.Action{System.Int32,System.Object})">
            <summary>
            Setup an action to run across the elements of a collection/enumerable.
            </summary>
            <param name="enumerable">The collection to scan</param>
            <param name="action">The action to perform on each element.</param>
            <returns>The elements from the input sequence</returns>
            <remarks>This is a LINQ compatible visitor pattern</remarks>
        </member>
        <member name="M:Jcd.DoWhenRun.DoWhenRunExtensions.Do(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            Setup an action to run across the elements of a collection/enumerable.
            </summary>
            <param name="enumerable">The collection to scan</param>
            <param name="action">The action to perform on each element.</param>
            <returns>The elements from the input sequence</returns>
            <remarks>This is a LINQ compatible visitor pattern</remarks>
        </member>
        <member name="M:Jcd.DoWhenRun.DoWhenRunExtensions.Run``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Forces enumeration of an enumerable. 
            </summary>
            <param name="enumerable">The enumerable to force enumeration on</param>
            <typeparam name="T">The type of each element in the enumeration.</typeparam>
            <remarks>
            Called solely on the likes of a List or Array this is a useless method.
            But combined with LINQ extensions and Scan this enables setting
            up easier to read code that performs operations on the elements
            within a collection, possibly filtered, or otherwise altered via LINQ.
            Coercing the enumeration then executes all of the Scan blocks, as appropriate.
            This then causes execution of the visitor pattern configured by calls to Scan.
            CAUTION: Do not use on a LINQ-to-SQL or similar enumerable. Results are undefined,
            and probably undesirable.
            </remarks>
        </member>
        <member name="M:Jcd.DoWhenRun.DoWhenRunExtensions.Run(System.Collections.IEnumerable)">
            <summary>
            Forces enumeration of an enumerable. 
            </summary>
            <param name="enumerable">The enumerable to force enumeration on</param>
            <remarks>
            Called solely on the likes of a List or Array this is a useless method.
            But combined with LINQ extensions and Scan this enables setting
            up easier to read code that performs operations on the elements
            within a collection, possibly filtered, or otherwise altered via LINQ.
            Coercing the enumeration then executes all of the Scan blocks, as appropriate.
            This then causes execution of the visitor pattern configured by calls to Scan.
            CAUTION: Do not use on a LINQ-to-SQL or similar enumerable. Results are undefined,
            and probably undesirable.
            </remarks>
        </member>
    </members>
</doc>
